// This is your Prisma schema file.
// Learn more at: https://pris.ly/d/prisma-schema

// Looking for ways to optimize your queries or scale with serverless/edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCK
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  status    UserStatus @default(PENDING)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  profile   Profile?
  posts     Post[]    @relation("UserPosts")
  likes     Like[]
  comments   Comment[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  bio         String?
  phone       String?
  dateOfBirth DateTime?
  address     String?
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
}

model Post {
  id           Int      @id @default(autoincrement())
  content      String
  imgUrl       String?
  imgName      String?
  imgPublicId  String?
  videoUrl     String?
  videoName    String?
  videoPublicId String?
  likeCount    Int      @default(0)
  commentCount  Int      @default(0)
  shareCount   Int      @default(0)
  userId       Int
  user         User      @relation("UserPosts", fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  likes        Like[]
  comments     Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  status    Boolean  @default(true)
}

model Comment {
  id               Int      @id @default(autoincrement())
  content          String
  imgUrl           String?
  imgName          String?
  imgPublicId      String?
  videoUrl         String?
  videoName        String?
  videoPublicId    String?
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  postId           Int
  post             Post     @relation(fields: [postId], references: [id])
  parentCommentId  Int?
}


